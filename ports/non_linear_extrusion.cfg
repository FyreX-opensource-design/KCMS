[include ../util/marlin_transcribe.cfg]

[gcode_macro _M592]
variable_lin_coeff: 0.0
variable_quad_coeff: 0.0
variable_const_coeff: 1.0
gcode:
    {% set A = params.A|default(0)|float %}
    {% set B = params.B|default(0)|float %}
    {% set C = params.C|default(1)|float %}
    SET_GCODE_VARIABLE MACRO=_M592 VARIABLE=lin_coeff VALUE={A}
    SET_GCODE_VARIABLE MACRO=_M592 VARIABLE=quad_coeff VALUE={B}
    SET_GCODE_VARIABLE MACRO=_M592 VARIABLE=const_coeff VALUE={C}

[gcode_macro M592]
gcode:
    _PARSE_MARLIN_PARAMS TARGET=_M592 ARGS='{rawparams}'

[gcode_macro _G1]
variable_extrusion_multiplier: 1
gcode:
    {% set E = params.E|default(0)|float %}
    {% set F = params.F|default(0)|int %}
    {% set X = params.X|default(0)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(0)|float %}
    {% if E < 0 %}
        G1.1 E{E} F{F} X{X} Y{Y} Z{Z}
    {% else %}
        G1.1 E{(E * printer["gcode_macro _G1"].extrusion_multiplier) * max(printer["gcode_macro _M592"].const_coeff, printer["gcode_macro _M592"].const_coeff + printer["gcode_macro _M592"].lin_coeff * (F / 60) + printer["gcode_macro _M592"].quad_coeff * ((F / 60) * (F / 60)))} F{F} X{X} Y{Y} Z{Z}



[gcode_macro G1]
replace_exsisting: G1.1
gcode:
    _PARSE_MARLIN_PARAMS TARGET=_G1 ARGS='{rawparams}'
